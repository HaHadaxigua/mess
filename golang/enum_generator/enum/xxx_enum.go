// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enum

import (
	"fmt"
)

const (
	// DirectoryASC is a Directory of type ASC.
	DirectoryASC Directory = iota
	// DirectoryDESC is a Directory of type DESC.
	DirectoryDESC
)

const _DirectoryName = "ASCDESC"

var _DirectoryMap = map[Directory]string{
	DirectoryASC:  _DirectoryName[0:3],
	DirectoryDESC: _DirectoryName[3:7],
}

// String implements the Stringer interface.
func (x Directory) String() string {
	if str, ok := _DirectoryMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Directory(%d)", x)
}

var _DirectoryValue = map[string]Directory{
	_DirectoryName[0:3]: DirectoryASC,
	_DirectoryName[3:7]: DirectoryDESC,
}

// ParseDirectory attempts to convert a string to a Directory.
func ParseDirectory(name string) (Directory, error) {
	if x, ok := _DirectoryValue[name]; ok {
		return x, nil
	}
	return Directory(0), fmt.Errorf("%s is not a valid Directory", name)
}

// MarshalText implements the text marshaller method.
func (x Directory) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Directory) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDirectory(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
